SHELL := bash
.ONESHELL:
SUBJOBS := 32

RED=\033[0;31m
GREEN=\033[0;32m
NC=\033[0m

DEPDIR := dependencies

BROTLI_VERSION := 1.1.0
ZLIB_VERSION := 1.3.1
ZSTD_VERSION := 1.5.6
IDN_VERSION := 2.3.4
UNISTRING_VERSION := 1.1
BORING_SSL_COMMIT := 673e61fc215b178a90c0e67858bbf162c8158993
NGHTTP2_VERSION := 1.63.0
NGTCP2_VERSION := 1.11.0
NGHTTP3_VERSION := 1.9.0
CURL_VERSION := 8_13_0
ICONV_VERSION := 1.17

install_dir := $(abspath libs)

brotli_static_libs := $(install_dir)/lib/libbrotlicommon.a $(install_dir)/lib/libbrotlidec.a $(install_dir)/lib/libbrotlienc.a
zstd_static_libs := $(install_dir)/lib/libzstd.a
zlib_static_libs := $(install_dir)/lib/libz.a
idn_static_libs := $(install_dir)/lib/libidn2.a
iconv_static_libs := $(install_dir)/lib/libiconv.a
unistring_static_libs := $(install_dir)/lib/libunistring.a
nghttp2_static_libs := $(install_dir)/lib/libnghttp2.a
ngtcp2_static_libs := $(install_dir)/lib/libngtcp2.a
nghttp3_static_libs := $(install_dir)/lib/libnghttp3.a
boringssl_static_libs := $(install_dir)/lib/libssl.a $(install_dir)/lib/libcrypto.a

boringssl_dir := $(abspath libraries/boringssl)

chrome_libs := $(iconv_static_libs) $(idn_static_libs) $(zstd_static_libs) $(brotli_static_libs) $(boringssl_static_libs) $(nghttp2_static_libs) $(ngtcp2_static_libs) $(nghttp3_static_libs) $(zlib_static_libs) $(unistring_static_libs)

install_deps := $(DEPDIR)/brotli-$(BROTLI_VERSION).tar.gz \
				$(DEPDIR)/zlib-$(ZLIB_VERSION).tar.gz \
				$(DEPDIR)/zstd-$(ZSTD_VERSION).tar.gz \
				$(DEPDIR)/libidn2-$(IDN_VERSION).tar.gz \
				$(DEPDIR)/libunistring-$(UNISTRING_VERSION).tar.gz \
				$(DEPDIR)/nghttp2-$(NGHTTP2_VERSION).tar.gz \
				$(DEPDIR)/nghttp3-$(NGHTTP3_VERSION).tar.gz \
				$(DEPDIR)/ngtcp2-$(NGTCP2_VERSION).tar.gz \
				$(DEPDIR)/libiconv-$(ICONV_VERSION).tar.gz \
				$(DEPDIR)/boringssl-$(BORING_SSL_COMMIT).tar.gz \
				$(DEPDIR)/curl-$(CURL_VERSION).tar.gz

CC = @CC@
CXX = @CXX@
STRIP = @STRIP@
prefix = @prefix@
exec_prefix = @exec_prefix@
srcdir = @abs_srcdir@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
build = @build@

build: $(CURL_VERSION)/.chrome
	echo ok
.PHONY: build

$(DEPDIR)/brotli-$(BROTLI_VERSION).tar.gz: | $(DEPDIR)
	@printf "$(GREEN)Donwloading $@$(NC)\n"
	wget "https://github.com/google/brotli/archive/refs/tags/v${BROTLI_VERSION}.tar.gz" -O $(DEPDIR)/brotli-${BROTLI_VERSION}.tar.gz -q

$(DEPDIR)/zlib-$(ZLIB_VERSION).tar.gz: | $(DEPDIR)
	@printf "$(GREEN)Donwloading $@$(NC)\n"
	wget https://zlib.net/zlib-1.3.1.tar.gz -P $(DEPDIR) -q

$(DEPDIR)/zstd-$(ZSTD_VERSION).tar.gz: | $(DEPDIR)
	@printf "$(GREEN)Donwloading $@$(NC)\n"
	wget https://github.com/facebook/zstd/releases/download/v$(ZSTD_VERSION)/zstd-$(ZSTD_VERSION).tar.gz -P $(DEPDIR) -q

$(DEPDIR)/libidn2-$(IDN_VERSION).tar.gz: | $(DEPDIR)
	@printf "$(GREEN)Donwloading $@$(NC)\n"
	wget https://ftp.gnu.org/gnu/libidn/libidn2-$(IDN_VERSION).tar.gz -O $(DEPDIR)/libidn2-$(IDN_VERSION).tar.gz -q

$(DEPDIR)/libunistring-$(UNISTRING_VERSION).tar.gz: | $(DEPDIR)
	@printf "$(GREEN)Donwloading $@$(NC)\n"
	wget https://ftp.gnu.org/gnu/libunistring/libunistring-$(UNISTRING_VERSION).tar.gz -P $(DEPDIR) -q

$(DEPDIR)/nghttp2-$(NGHTTP2_VERSION).tar.gz: | $(DEPDIR)
	@printf "$(GREEN)Donwloading $@$(NC)\n"
	wget https://github.com/nghttp2/nghttp2/releases/download/v$(NGHTTP2_VERSION)/nghttp2-$(NGHTTP2_VERSION).tar.gz -P $(DEPDIR) -q

$(DEPDIR)/nghttp3-$(NGHTTP3_VERSION).tar.gz: | $(DEPDIR)
	@printf "$(GREEN)Donwloading $@$(NC)\n"
	wget https://github.com/ngtcp2/nghttp3/releases/download/v$(NGHTTP3_VERSION)/nghttp3-$(NGHTTP3_VERSION).tar.gz -P $(DEPDIR) -q

$(DEPDIR)/ngtcp2-$(NGTCP2_VERSION).tar.gz: | $(DEPDIR)
	@printf "$(GREEN)Donwloading $@$(NC)\n"
	wget https://github.com/ngtcp2/ngtcp2/releases/download/v$(NGTCP2_VERSION)/ngtcp2-$(NGTCP2_VERSION).tar.gz -P $(DEPDIR) -q

$(DEPDIR)/boringssl-$(BORING_SSL_COMMIT).tar.gz: | $(DEPDIR)
	@printf "$(GREEN)Donwloading $@$(NC)\n"
	wget https://github.com/google/boringssl/archive/$(BORING_SSL_COMMIT).tar.gz -O $(DEPDIR)/boringssl-$(BORING_SSL_COMMIT).tar.gz -q

$(DEPDIR)/libiconv-$(ICONV_VERSION).tar.gz: | $(DEPDIR)
	@printf "$(GREEN)Donwloading $@$(NC)\n"
	wget https://ftp.gnu.org/pub/gnu/libiconv/libiconv-$(ICONV_VERSION).tar.gz -P $(DEPDIR) -q

$(DEPDIR)/curl-$(CURL_VERSION).tar.gz: | $(DEPDIR)
	@printf "$(GREEN)Donwloading $@$(NC)\n"
	wget https://github.com/curl/curl/archive/curl-$(CURL_VERSION).tar.gz -P $(DEPDIR) -q

$(DEPDIR):
	mkdir -p $(DEPDIR)

download: $(install_deps)
	@echo "All dependencies downloaded to $(DEPDIR): $(install_deps)"

libraries/.extracted: $(install_deps)
	mkdir -p libraries
	mkdir -p temp
	tar -xzf $(DEPDIR)/zstd-$(ZSTD_VERSION).tar.gz -C temp
	mv temp/zstd-$(ZSTD_VERSION) libraries/zstd
	tar -xzf $(DEPDIR)/zlib-$(ZLIB_VERSION).tar.gz -C temp
	mv temp/zlib-$(ZLIB_VERSION) libraries/zlib
	tar -xzf $(DEPDIR)/brotli-$(BROTLI_VERSION).tar.gz -C temp
	mv temp/brotli-$(BROTLI_VERSION) libraries/brotli
	tar -xzf $(DEPDIR)/libidn2-$(IDN_VERSION).tar.gz -C temp
	mv temp/libidn2-$(IDN_VERSION) libraries/libidn2
	tar -xzf $(DEPDIR)/libunistring-$(UNISTRING_VERSION).tar.gz -C temp
	mv temp/libunistring-$(UNISTRING_VERSION) libraries/libunistring
	tar -xzf $(DEPDIR)/nghttp2-$(NGHTTP2_VERSION).tar.gz -C temp
	mv temp/nghttp2-$(NGHTTP2_VERSION) libraries/nghttp2
	tar -xzf $(DEPDIR)/nghttp3-$(NGHTTP3_VERSION).tar.gz -C temp
	mv temp/nghttp3-$(NGHTTP3_VERSION) libraries/nghttp3
	tar -xzf $(DEPDIR)/ngtcp2-$(NGTCP2_VERSION).tar.gz -C temp
	mv temp/ngtcp2-$(NGTCP2_VERSION) libraries/ngtcp2
	tar -xzf $(DEPDIR)/libiconv-$(ICONV_VERSION).tar.gz -C temp
	mv temp/libiconv-$(ICONV_VERSION) libraries/libiconv
	tar -xzf $(DEPDIR)/boringssl-$(BORING_SSL_COMMIT).tar.gz -C temp
	mv temp/boringssl-$(BORING_SSL_COMMIT) libraries/boringssl
	tar -xzf $(DEPDIR)/curl-$(CURL_VERSION).tar.gz -C temp
	mv temp/curl-curl-$(CURL_VERSION) libraries/curl
	mkdir -p $(install_dir)
	touch libraries/.extracted

unarchive: libraries/.extracted

$(brotli_static_libs): libraries/.extracted
	cd libraries/brotli
	mkdir -p out
	cd out
	case $(host_os) in               \
		linux*)                      \
			system_name=Linux        \
			;;                       \
		darwin*)                     \
			system_name=Darwin       \
			;;                       \
		*)                           \
			system_name=$(host_os)   \
			;;                       \
	esac

	@cmake@ -DCMAKE_BUILD_TYPE=Release \
		-DCMAKE_INSTALL_PREFIX=$(install_dir) \
		-DCMAKE_INSTALL_LIBDIR=lib \
		-DCMAKE_CXX_COMPILER=$(CXX) \
		-DCMAKE_C_COMPILER=$(CC) \
		-DCMAKE_C_FLAGS="$(CFLAGS)" \
		-DCMAKE_SYSTEM_NAME=$$system_name \
		-DCMAKE_SYSTEM_PROCESSOR=$(host_cpu) \
		-DBUILD_SHARED_LIBS=OFF \
		..

	@cmake@ --build . --config Release --target install --parallel $(SUBJOBS)

	cd ../../../

brotli: $(brotli_static_libs)

$(zstd_static_libs): libraries/.extracted
	cd libraries/zstd

	MT=1 make -j$(SUBJOBS) PREFIX=$(install_dir) install
	cd ../..

zstd: $(zstd_static_libs)

$(zlib_static_libs): libraries/.extracted
	cd libraries/zlib

	./configure --static --prefix=$(install_dir)
	make install -j$(SUBJOBS)
	cd ../..

zlib: $(zlib_static_libs)

$(idn_static_libs): libraries/.extracted
	cd libraries/libidn2

	./configure --enable-static --disable-shared --disable-doc --prefix=$(install_dir)
	make install -j$(SUBJOBS)
	cd ../..

libidn2: $(idn_static_libs)

$(iconv_static_libs): libraries/.extracted
	cd libraries/libiconv

	./configure --prefix=$(install_dir) --enable-static=yes --enable-shared=no
	make install -j$(SUBJOBS)
	cd ../..

libiconv: $(iconv_static_libs)

$(unistring_static_libs): libraries/.extracted
	cd libraries/libunistring

	./configure --prefix=$(install_dir) --enable-static=yes --enable-shared=no \
		LDFLAGS="-L$(install_dir)/lib" \
		CPPFLAGS="-L$(install_dir)/include"
	make install -j$(SUBJOBS)
	cd ../../

libunistring: $(unistring_static_libs)

libraries/boringssl/.patched: libraries/.extracted $(srcdir)/patches/boringssl.patch
	cd libraries/boringssl
	for p in $^; do patch -p1 < $$p; done
	touch .patched
	cd ../../

$(boringssl_static_libs): libraries/boringssl/.patched
	mkdir -p $(boringssl_dir)/build
	cd $(boringssl_dir)/build

	# Convert autoconf style os name to CMake style os name.
	case $(host_os) in               \
		linux*)                      \
			system_name=Linux        \
			;;                       \
		darwin*)                     \
			system_name=Darwin       \
			;;                       \
		*)                           \
			system_name=$(host_os)   \
			;;                       \
	esac

	# The extra CMAKE_C_FLAGS are needed because otherwise boringssl fails to
	# compile in release mode on some systems with gcc 12 (e.g. Fedora).
	# In addition, guard these options with -Wno-unknown-warning-option to
	# prevent clang from failing on them.
	@cmake@ -DCMAKE_BUILD_TYPE=Release \
			-DCMAKE_POSITION_INDEPENDENT_CODE=on \
			-DCMAKE_C_FLAGS="$(CFLAGS) -Wno-unknown-warning-option -Wno-stringop-overflow -Wno-array-bounds -Wno-macro-redefined" \
			-DCMAKE_CXX_FLAGS="$(CXX_FLAGS) -Wno-macro-redefined" \
			-DCMAKE_CXX_COMPILER=$(CXX) \
			-DCMAKE_C_COMPILER=$(CC) \
			-DCMAKE_SYSTEM_NAME=$$system_name \
			-DCMAKE_SYSTEM_PROCESSOR=$(host_cpu) \
			-DBUILD_SHARED_LIBS=0 \
			-GNinja \
			..
	@ninja@ -j$(SUBJOBS)

	# Fix the directory structure so that curl can compile against it.
	# See: https://everything.curl.dev/build/boringssl.html
	mkdir -p $(install_dir)/lib
	cp ssl/libssl.a $(install_dir)/lib
	cp crypto/libcrypto.a $(install_dir)/lib

boringssl: $(boringssl_static_libs)

$(nghttp2_static_libs): libraries/.extracted
	cd libraries/nghttp2

	# Set up the configure flags to nghttp2.
	# If the user provided the --host flag to our configure script
	# (for cross compilation), then pass it on to nghttp2.
	{ \
		config_flags="--prefix=$(install_dir)"; \
		config_flags="$$config_flags --with-pic --enable-lib-only"; \
		config_flags="$$config_flags --disable-shared --enable-static --disable-python-bindings"; \
		if test -n "$(host_alias)"; then \
			config_flags="$$config_flags --host=$(host_alias)"; \
		fi; \
	}

	./configure $$config_flags
	make install -j$(SUBJOBS)

nghttp2: $(nghttp2_static_libs)

$(ngtcp2_static_libs): $(boringssl_static_libs)
	cd libraries/ngtcp2
	autoreconf -i

	{ \
		config_flags="--prefix=$(install_dir)"; \
		config_flags="$$config_flags --with-pic --enable-lib-only"; \
		config_flags="$$config_flags --disable-shared --enable-static --disable-python-bindings"; \
		if test -n "$(host_alias)"; then \
			config_flags="$$config_flags --host=$(host_alias)"; \
		fi; \
	}

	./configure PKG_CONFIG_PATH=$(install_dir)/lib/pkgconfig \
		BORINGSSL_LIBS="-L$(install_dir)/lib -lssl -lcrypto -lpthread" \
		BORINGSSL_CFLAGS="-I$(boringssl_dir)/include" \
		--with-boringssl \
		$$config_flags
	$(MAKE) install -j$(SUBJOBS)

ngtcp2: $(ngtcp2_static_libs)

$(nghttp3_static_libs): libraries/.extracted
	cd libraries/nghttp3
	{ \
		config_flags="--prefix=$(install_dir)"; \
		config_flags="$$config_flags --with-pic --enable-lib-only"; \
		config_flags="$$config_flags --disable-shared --enable-static --disable-python-bindings"; \
		if test -n "$(host_alias)"; then \
			config_flags="$$config_flags --host=$(host_alias)"; \
		fi; \
	}

	./configure $$config_flags
	make install -j$(SUBJOBS)

nghttp3: $(nghttp3_static_libs)

# Apply the "Chorme version" patches and mark using a dummy file
libraries/curl/.patched: $(srcdir)/patches/curl.patch
	cd libraries/curl
	for p in $^; do patch -p1 < $$p; done
	# Re-generate the configure script
	autoreconf -fi
	touch .patched

libraries/curl/.chrome: $(chrome_libs) libraries/curl/.patched
	cd libraries/curl

	# Set up the configure flags to curl.
	# If the user provided the --host flag to our configure script
	# (for cross compilation), then pass it on to curl.
	
	# XXX: psl should be enabled in the future:
	# https://daniel.haxx.se/blog/2024/01/10/psl-in-curl/
	{ \
	  config_flags="--prefix=$(install_dir)"; \
	  config_flags="$$config_flags --with-brotli=$(install_dir)"; \
	  config_flags="$$config_flags --with-nghttp2=$(install_dir)"; \
	  config_flags="$$config_flags --with-ngtcp2=$(install_dir)"; \
	  config_flags="$$config_flags --with-nghttp3=$(install_dir)"; \
	  config_flags="$$config_flags --with-zlib=$(install_dir)"; \
	  config_flags="$$config_flags --with-zstd=$(install_dir)"; \
	  config_flags="$$config_flags --with-openssl=$(boringssl_dir)"; \
	  config_flags="$$config_flags --with-libidn2=$(install_dir)"; \
	  config_flags="$$config_flags --without-libpsl"; \
	  config_flags="$$config_flags --disable-ldap"; \
	  config_flags="$$config_flags --disable-ldaps"; \
	  config_flags="$$config_flags --enable-websockets"; \
	  config_flags="$$config_flags --enable-ech"; \
	  config_flags="$$config_flags --enable-ipv6"; \
	  config_flags="$$config_flags USE_CURL_SSLKEYLOGFILE=true"; \
	  config_flags="$$config_flags --enable-static --disable-shared"; \
	  add_libs="-pthread -lpthread -lc++ -lunistring -liconv"; \
	}

	echo "Configuring curl with: $$config_flags"

	PKG_CONFIG_PATH="$(install_dir)/lib/pkgconfig" \
		CXXFLAGS="-stdlib=libc++" LDFLAGS="-L$(install_dir)/lib" \
			 ./configure \
			 $$config_flags \
			 LIBS="$$add_libs" \
			 
	make install -j$(SUBJOBS)
	touch .chrome
libcurl: libraries/curl/.chrome